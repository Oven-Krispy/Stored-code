import random
# allows the use of random integers when dealing and shuffling cards 
import pygame
# allows use of the display
play = ""

# Card class
class Card:
    suits = {'Hearts': 'H', 'Diamonds': 'D', 'Clubs': 'C', 'Spades': 'S'}
    # a dictionary containing ties between the suits and the letter to represent them
    values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
    # an array which contains the possible card values

    def __init__(self, suit, value):
        self.suit = suit
        # initiates the suit attribute
        self.value = value
        # initiates the value attribute


# Deck class
class Deck:
    def __init__(self):
        self.cards = [Card(suit, value) for suit in Card.suits for value in Card.values]
        # this makes a card of every possible value 
        random.shuffle(self.cards)
        # this randomises the card order in the deck

    def draw(self):
        return self.cards.pop()
        # this removes the dealt / drawn card from the deck 


# Player class
class Player:
    def __init__(self, name):
        self.name = name
        # initiates the attribute 'name' e.g. human or AI
        self.hand = []
        # makes the player's hand an empty array

    def draw(self, deck):
        self.hand.append(deck.draw())
        # adds the drawn card to the player's hand array

    def reset_hand(self):
        self.hand = []
        # removes all cards from the player's hand

class mainMenu:
  def __init__(self):
    self.rules_applied = []
    # empty array to place the rules which are selected in
    self.modes_applied = []
    # same as above but for modes 
    
  def setup_pygame(self):
    pygame.init()
    #initiates the pygame display
    self.screen = pygame.display.set_mode((800, 600))
    # sets size of the display screen
    
  def draw_buttons(self):
    if self.screen():
      button_width = 10
      button_length = 10
      # sets the sizes of each checkbox
      font = pygame.font.Font(None, 36)
      # sets the font and its size 
      pygame.draw.rect(self.screen, (0,0,0), 100, 100, button_width, button_length)
      
  
  def draw_menu(self):
    self.setup_pygame()
    # calls the setup function to start displaying the game
    running = True
    clock = pygame.time.Clock()
    # makes the game run and sets the framerate

    while running:
        startGame = 0
        self.screen.fill((0, 128, 0))  
        # green background for the table
        pygame.display.flip()
        clock.tick(60)
        # runs the display
        self.draw_buttons()
    pygame.quit()
  


# Texas Hold'em game
class TexasHoldem:
    def __init__(self):
        self.deck = Deck()
        # creates the deck of 52 cards
        self.players = [Player('Human'), Player('AI 1'), 
        Player('AI 2'), Player('AI 3'), Player('AI 4')]
        # makes the five players present in the game
        self.community_cards = []
        # makes an empty array to add the dealt cards to
        self.screen = None
        # sets up the pygame screen

    def setup_pygame(self):
        pygame.init()
        # initiates the pygame display
        self.screen = pygame.display.set_mode((800, 600))
        # sets the size of the display screen

    def deal(self):
        for player in self.players:
        # runs as many times as there are players
            player.draw(self.deck)
            player.draw(self.deck)
            # player adds two cards to their hand

    def flop(self):
        self.community_cards += [self.deck.draw() for _ in range(3)]
        # adds three cards to the community card array
        self.display_community_cards()
        # displays the three cards

    def turn(self):
        self.community_cards.append(self.deck.draw())
        # adds one card to the community card array
        self.display_community_cards()
        # displays all cards in the community card array

    def river(self):
        self.community_cards.append(self.deck.draw())
        # adds one card to the community card array
        self.display_community_cards()
        # displays all cards in the community card array

    def reset_community_cards(self):
        self.community_cards = []
        # resets the community card array to empty
        self.display_community_cards()
        # displays the blank screen since no community 
        # cards are present

    def reset_player_hands(self):
        for player in self.players:
            player.reset_hand()
            # empties each player's hand array
        self.deal()
        # deals a new set of two cards

    def draw_card(self, card, x, y, face_up=True):
        if self.screen:
            card_width = 70
            card_height = 110
            # initiates the lengths of the sides of the
            # cards
            font = pygame.font.Font(None, 36)
            # sets the font and font size of the text
            pygame.draw.rect(self.screen, (255, 255, 255),
            (x, y, card_width, card_height))
            # draws the card border 
            pygame.draw.rect(self.screen, (0, 0, 0),
            (x, y, card_width, card_height), 2)
            # draws the card face

            if face_up:
                color = (255, 0, 0) if card.suit in ['Hearts', 'Diamonds'] else (0, 0, 0)
                # makes the charachter colour red if hearts
                # or diamonds and black otherwise
                value_text = font.render(card.value, True,
                color)
                # sets the value text to be printed
                suit_text = font.render(Card.suits[card.suit],
                True, color)
                # sets the suit text to be printed

                if card.value == '10':
                    value_x = x + 1
                    bottom_value_x = x + 43
                    # makes the vale '10' in a slightly more
                    # left position on the card
                else:
                    value_x = x + 6
                    bottom_value_x = x + 48
                    # places the value in the card corners

                self.screen.blit(value_text, (value_x, y + 8))
                self.screen.blit(suit_text, (x + 24, y + 45))  
                self.screen.blit(value_text, (bottom_value_x,
                y + 85))
                # displays the suit and value on the card
            else:
                pygame.draw.rect(self.screen, (0, 0, 0),
                (x, y, card_width, card_height), 0)
                # displays the back of the card

    def display_community_cards(self):
        start_x = ((800 - 70 * len(self.community_cards)) 
        // 2) - 10  
        for idx, card in enumerate(self.community_cards):
            self.draw_card(card, start_x + 90 * idx, 230)  
        # prints the community cards and makes sure they are 
        # centered

    def display_player_cards(self):
        for j in range(2):
            self.draw_card(self.players[0].hand[j], 
            350 + j * 80, 450, face_up=True)
            # draws the player's two face up cards at the 
            # bottom of the screen facing the user
            

    def play(self):
        self.setup_pygame()
        self.deal()
        # calls the deal and setup functions to start
        # the game
        running = True
        clock = pygame.time.Clock()
        # makes the game run and sets the framerate

        while running:
          # keybinds in order to test display events 
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_f:
                        self.flop()
                    elif event.key == pygame.K_t:
                        self.turn()
                    elif event.key == pygame.K_r:
                        self.river()
                    elif event.key == pygame.K_e:
                        self.reset_community_cards()
                        self.reset_player_hands()

            self.screen.fill((0, 128, 0))  
            # green background for the table
            self.display_community_cards()
            self.display_player_cards()
            # displays the face up cards onto the 
            # table
            pygame.display.flip()
            clock.tick(60)
            # runs the display
        pygame.quit()

# Main function to open the main menu
def menu():
  menu = mainMenu()
  menu.draw_menu()


# Main function to play the game
def main():
    game = TexasHoldem()
    game.play()
    # imports the game loop and makes it callable


if __name__ == '__main__':
    menu()
    main()
    # calls the game loop
